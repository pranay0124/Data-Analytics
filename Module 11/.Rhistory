getwd()
getwd()
mvtWeek1 <- read.csv("C:/Users/dellg7/Downloads/mvtWeek1.csv")
View(mvtWeek1)
hist(mvt$Date, breaks = 100)
mvt = read.csv(mvtWeek1)
mvt = read.csv(mvtWeek1.csv)
mvt <- read.csv("C:/Users/dellg7/Downloads/mvtWeek1.csv")
View(mvt)
hist(mvt$Date, breaks = 100)
DateConvert = as.Date(strptime(mvt$Date, "%m/%d/%y %H:%M"))
mvt$Date = DateConvert
hist(mvt$Date, breaks = 100)
save.image("C:/Users/dellg7/Desktop/temm.RData")
load("C:/Users/dellg7/Desktop/temm.RData")
The preview shows you a rendered HTML copy of the contents of the editor. Consequently, unlike *Knit*, *Preview* does not run any R code chunks. Instead, the output of the chunk when it was last run in the editor is displayed.
hist(mvt$Date, breaks = 100)
boxplot(mvt$Date ~ mvt$Arrest)
table(mvt$Arrest, mvt$Year == 2001)
2152/(13384+2152)
2152/(18517+2152)
table(mvt$Arrest, mvt$Year == 2007)
1212/(13068+1212)
table(mvt$Arrest, mvt$Year == 2012)
550/(13542+550)
---
title: "R Notebook"
output: html_notebook
---
hist(mvt$Date, breaks = 100)
boxplot(mvt$Date ~ mvt$Arrest)
table(mvt$Arrest, mvt$Year == 2001)
plot(cars)
plot(cars)
hist(mvt$Date, breaks = 100)
boxplot(mvt$Date ~ mvt$Arrest)
table(mvt$Arrest, mvt$Year == 2001)
Ä« hist(mvt$Date, breaks = 100)
hist(mvt$Date, breaks = 100)
boxplot(mvt$Date ~ mvt$Arrest)
table(mvt$Arrest, mvt$Year == 2001)
plot(cars)
hist(mvt$Date, breaks = 100)
hist(mvt$Date, breaks = 100)
songs = read.csv("songs.csv")
songs = read.csv("songs.csv")
install.packages("rpart")
install.packages("rpart.plot")
setwd("E:/Data-Analytics/Module 11")
bank = read.csv("bank-full.csv")
str(bank)
bank = read.csv("bank-full.csv")
library(caTools)
set.seed(1000)
split = sample.split(bank, SplitRatio = 0.6)
bankTrain = subset(bank, split == TRUE)
bankTest = subset(bank, split == FALSE)
model1 = glm(y ~ age + balance + campaign + duration, data = bankTrain, family = binomial)
model2 = glm(y ~ age + balance + duration, data = bankTrain, family = binomial)
summary(model1)
summary(model2)
predModel1 = predict(model1, newdata = bankTest, type = "response")
table(bankTest$y, predModel1)
table(bankTest$y, predModel1 > 0.5)
table(bankTest$y, predModel1)
table(bankTest$y, predModel1 > 0.5)
sensitivity = 359/(359+1813)
specificity = 16181/(16181+264)
sensitivity
specificity
#3
library(ROCR)
ROCRpred = predict(predModel1, bankTest$y)
as.numeric(performance(ROCRpred,"auc")@y.values)
library(ROCR)
ROCRpred = predict(predModel1, bankTest$y)
ROCRpred = prediction(predModel1, bankTest$y)
as.numeric(performance(ROCRpred,"auc")@y.values)
#3
library(ROCR)
ROCRpred = prediction(predModel1, bankTest$y)
as.numeric(performance(ROCRpred,"auc")@y.values)
#4
library(rpart)
library(rpart.plot)
modelCART1 = rpart(y ~ age + balance + duration, data = bankTrain, method = "class")
prp(modelCART1)
#5
predModel2 = predict(model2, newdata = bankTest, type = "response")
ROCRpred2 = prediction(predModel2, bankTest$y)
as.numeric(performance(ROCRpred2,"auc")@y.values)
table(bank$marital == "married", bank$job == "technician")
4052/(14452+3545+23162+4052)
sub1 = subset(bank, martial == "married")
sub1 = subset(bank, marital == "married")
str(sub1)
4052/(14452+3545+23162+4052)
movies = read.table("Movies.txt", header = FALSE, sep = "|", quote = "\"")
movies
movies
movies = read.table("Movies.txt", header = FALSE, sep = "|", quote = "\"")
colnames(movies) = c("ID","Title","ReleaseDate","VideoReleaseDate","IMDB","Unknown","Action","Adventure","Animation","Childrens","Comedy","Crime","Documentary","Drama","Fantasy","FilmNoir","Horror","Musical","Mystery","Romance","SciFi","Thriller","War","Western")
str(movies)
movies$ID = NULL
movies$Title = NULL
movies$ReleaseDate = NULL
movies$VideoReleaseDate = NULL
str(movies)
table(movies$Action == 1, movies$Horror == 1)
distances = dist(movies[2:20], method = "euclidean")
cluster1 = hclust(distances, method = "ward")
plot(cluster1)
rect.hclust(cluster1, y = 150, border="red")
rect.hclust(cluster1, h = 150, border="red")
plot(cluster1)
cluster1Group = cutree(cluster1, k=7)
tapply(cluster1, cluster1Group, mean)
abline(h=150, col='red')
table(cluster1Group)
max(table(cluster1Group))
min(table(cluster1Group))
table(movies$Adventure, cluster1Group == 1)
table(movies$Adventure, cluster1Group)
table(movies$Childrens, cluster1Group)
table(movies$Fantasy, cluster1Group)
KMC = kmeans(movies[2:20], k)
#7
k = 7
set.seed(1000)
KMC = kmeans(movies[2:20], k)
KMC$cluster
str(KMC)
table(KMC$size)
KMC$size
table(KMC$centers == "Action" ,KMC$cluster)
table(KMC$centers == "Action")
KMC$cen = as.factor(KMC$centers)
str(KMC)
KMC$cen = NULL
str(KMC)
energy = read.csv("energy_readings.csv")
str(energy)
energy = read.csv("energy_readings.csv")
str(energy)
energy = read.csv("energy_readings.csv", stringsAsFactors = FALSE)
str(energy)
table(energy$responsive)
#2
library(tm)
library(SnowballC)
corpus = Corpus(VectorSource(energy$email))
corpus = tm_map(corpus,tolower)
#2
library(tm)
library(SnowballC)
corpus = Corpus(VectorSource(energy$email))
corpus = tm_map(corpus,tolower)
corpus = tm_map(corpus,removePunctuation)
corpus = tm_map(corpus,removeWords, stopwords("english"))
corpus = tm_map(corpus,stemDocument)
dtm = DocumentTermMatrix(corpus)
sparse = removeSparseTerms(dtm, 0.95)
sparse
sparseDF = as.data.frame(as.matrix(sparse))
sparseDF$responsive = energy$responsive
splitSparse = sample.split(sparseDF$responsive, SplitRatio = 0.75)
sparseDFTrain = subset(sparseDF, splitSparse == TRUE)
sparseDFTest = subset(sparseDF, splitSparse == FALSE)
sparseCART = rpart(responsive ~., data, data = sparseDFTrain, method = "class")
predictSparseCART = predict(sparseCART, newdata = sparseDFTest, type = "class")
str(predictSparseCART)
table(sparseDFTest, predictSparseCART > 0.6)
table(sparseDFTest$responsive, predictSparseCART > 0.6)
sparseDFTrain$responsive = as.factor(sparseDFTrain$responsive)
sparseDFTest$responsive = as.factor(sparseDFTest$responsive)
sparseCART = rpart(responsive ~., data, data = sparseDFTrain, method = "class")
predictSparseCART = predict(sparseCART, newdata = sparseDFTest, type = "class")
table(sparseDFTest$responsive, predictSparseCART > 0.6)
#2
library(tm)
library(SnowballC)
library(rpart)
corpus = Corpus(VectorSource(energy$email))
corpus = tm_map(corpus,tolower)
corpus = tm_map(corpus,removePunctuation)
corpus = tm_map(corpus,removeWords, stopwords("english"))
corpus = tm_map(corpus,stemDocument)
dtm = DocumentTermMatrix(corpus)
sparse = removeSparseTerms(dtm, 0.95)
sparseDF = as.data.frame(as.matrix(sparse))
sparseDF$responsive = energy$responsive
set.seed(1500)
splitSparse = sample.split(sparseDF$responsive, SplitRatio = 0.75)
sparseDFTrain = subset(sparseDF, splitSparse == TRUE)
sparseDFTest = subset(sparseDF, splitSparse == FALSE)
sparseCART = rpart(responsive ~., data, data = sparseDFTrain, method = "class")
predictSparseCART = predict(sparseCART, newdata = sparseDFTest, type = "class")
table(sparseDFTest$responsive, as.numeric(predictSparseCART) > 0.6)
table(sparseDFTest$responsive, as.numeric(predictSparseCART) = 0.8)
table(sparseDFTest$responsive, as.numeric(predictSparseCART) > 0.8)
table(sparseDFTest$responsive, as.numeric(predictSparseCART) > 0.5)
table(sparseDFTest$responsive, as.numeric(predictSparseCART) > 0.6)
179/(179+35)
table(sparseDFTest$responsive, as.numeric(predictSparseCART) > 0.8)
table(sparseDFTest$responsive, as.numeric(predictSparseCART))
#3
table(sparseDFTest$responsive, as.numeric(predictSparseCART) > 0.5)
table(sparseDFTest$responsive, as.numeric(predictSparseCART) > 0.7)
table(sparseDFTest$responsive, as.numeric(predictSparseCART) > 0.9)
#5
library(ROCR)
ROCRsparse = prediction(predictSparseCART, sparseDFTest$responsive)
ROCRgraph = performance(ROCRsparse, "tpr", "fpr")
as.numeric(performance(ROCRsparse,"auc")@y.values)
pred = predict(predictSparseCART, sparseDFTest$responsive)
pred = predict(as.numeric(predictSparseCART), sparseDFTest$responsive)
ROCRsparse = prediction(as.numeric(predictSparseCART), sparseDFTest$responsive)
ROCRgraph = performance(ROCRsparse, "tpr", "fpr")
plot(ROCRgraph)
as.numeric(performance(ROCRsparse,"auc")@y.values)
climate = read.csv("climate_change.csv")
str(climate)
#1
climate = read.csv("climate_change.csv")
str(climate)
table(climate$Year)
num(table(climate$Year))
count(table(climate$Year))
library(ggplot2)
scatterplot = ggplot(climate, aes(x = N2O, y = Temp)) + geom_line()
scatterplot
scatterplot = ggplot(climate, aes(x = N2O, y = Temp)) + geom_line() + xlab("Concentration of N2O") + ylab("Temperature")
scatterplot
llmodel = lm(Temp ~ Aerosols, data = climate)
ggplot(climate, aes(x = Temp, y = Aerosols)) + geom_line() + stat_smooth(method = "lm")
#2
library(ggplot2)
scatterplot = ggplot(climate, aes(x = N2O, y = Temp)) + geom_line() + xlab("Concentration of N2O") + ylab("Temperature")
scatterplot
intl = read.csv("intl.csv")
str(intl)
ggplot(intl, aes(x = Region, y = PercentOfIntl)) + geom_bar(stat = "identity", fill = "red") + ylab("International Students Percentage") + theme(axix.text.x = element_text(angle = 45, vjust = 1))
ggplot(intl, aes(x = Region, y = PercentOfIntl)) + geom_bar(stat = "identity", fill = "red") + ylab("International Students Percentage") + theme(axix.text.x = element_text(angle = 45, hjust = 1))
ggplot(intl, aes(x = Region, y = PercentOfIntl)) + geom_bar(stat = "identity", fill = "red") + ylab("International Students Percentage") + theme(axis.text.x = element_text(angle = 45, hjust = 1))
pie(intl$Region)
pie(as.numeric(intl$Region))
#5
y = c("Region1","Region2","Region3","Region4","Region5","Region6","Region7","Region8")
pie(as.numeric(intl$Region), y)
predModelCART1 = predict(modelCART1, newdata = bankTest, type="class")
predModelCART1 = predict(modelCART1, newdata = bankTest, type="class")
ROCRpred2 = prediction(predModelCART1, bankTest$y)
as.numeric(performance(ROCRpred2,"auc")@y.values)
#5
predModelCART1 = predict(modelCART1, newdata = bankTest, type="class")
ROCRpred2 = prediction(predModelCART1, bankTest$y)
as.numeric(performance(ROCRpred2,"auc")@y.values)
#predModel2 = predict(model2, newdata = bankTest, type = "response")
#ROCRpred2 = prediction(predModel2, bankTest$y)
#as.numeric(performance(ROCRpred2,"auc")@y.values)
#6
table(bank$marital == "married", bank$job == "technician")
4052/(14452+3545+23162+4052)
str(KMC)
table(KMC$cluster == 6)
str(cluster1Group)
table(cluster1Group)
table(KMC$cluster == 4)
table(KMC$cluster == 3)
table(KMC$cluster, KMC$centers == "Action")
subset
