getwd()
getwd()
mvtWeek1 <- read.csv("C:/Users/dellg7/Downloads/mvtWeek1.csv")
View(mvtWeek1)
hist(mvt$Date, breaks = 100)
mvt = read.csv(mvtWeek1)
mvt = read.csv(mvtWeek1.csv)
mvt <- read.csv("C:/Users/dellg7/Downloads/mvtWeek1.csv")
View(mvt)
hist(mvt$Date, breaks = 100)
DateConvert = as.Date(strptime(mvt$Date, "%m/%d/%y %H:%M"))
mvt$Date = DateConvert
hist(mvt$Date, breaks = 100)
save.image("C:/Users/dellg7/Desktop/temm.RData")
load("C:/Users/dellg7/Desktop/temm.RData")
The preview shows you a rendered HTML copy of the contents of the editor. Consequently, unlike *Knit*, *Preview* does not run any R code chunks. Instead, the output of the chunk when it was last run in the editor is displayed.
hist(mvt$Date, breaks = 100)
boxplot(mvt$Date ~ mvt$Arrest)
table(mvt$Arrest, mvt$Year == 2001)
2152/(13384+2152)
2152/(18517+2152)
table(mvt$Arrest, mvt$Year == 2007)
1212/(13068+1212)
table(mvt$Arrest, mvt$Year == 2012)
550/(13542+550)
---
title: "R Notebook"
output: html_notebook
---
hist(mvt$Date, breaks = 100)
boxplot(mvt$Date ~ mvt$Arrest)
table(mvt$Arrest, mvt$Year == 2001)
plot(cars)
plot(cars)
hist(mvt$Date, breaks = 100)
boxplot(mvt$Date ~ mvt$Arrest)
table(mvt$Arrest, mvt$Year == 2001)
Ä« hist(mvt$Date, breaks = 100)
hist(mvt$Date, breaks = 100)
boxplot(mvt$Date ~ mvt$Arrest)
table(mvt$Arrest, mvt$Year == 2001)
plot(cars)
hist(mvt$Date, breaks = 100)
hist(mvt$Date, breaks = 100)
songs = read.csv("songs.csv")
songs = read.csv("songs.csv")
install.packages("rpart")
install.packages("rpart.plot")
setwd("E:/Data-Analytics/Module 7/a1")
vote = read.csv("gerber.csv")
View(vote)
View(vote)
table(vote$voting)
#1.1
gerber = read.csv("gerber.csv")
table(gerber$voting)
#1.2
tapply(gerber$voting, gerber$civicduty, mean)
tapply(gerber$voting, gerber$hawthorne, mean)
tapply(gerber$voting, gerber$self, mean)
tapply(gerber$voting, gerber$neighbors, mean)
gerberlm = lm(voting ~ civicduty + hawthorne + self + neighbors, date = gerber)
gerberlm = glm(voting ~ civicduty + hawthorne + self + neighbors, date = gerber, family = "binomial")
#1.1
gerber = read.csv("gerber.csv")
table(gerber$voting)
#1.2
tapply(gerber$voting, gerber$civicduty, mean)
tapply(gerber$voting, gerber$hawthorne, mean)
tapply(gerber$voting, gerber$self, mean)
tapply(gerber$voting, gerber$neighbors, mean)
#1.3
gerberlm = glm(voting ~ civicduty + hawthorne + self + neighbors, date = gerber, family = "binomial")
LogModel = glm(voting ~ civicduty + hawthorne + self + neighbors, data=gerber, family="binomial")
#1.4
predictLog = predict(LogModel, type = "response")
table(gerber$voting, predictLog > 0.3)
(51966+134513)/nrow(gerber)
#1.5
table(gerber$voting, predictLog > 0.5)
#1.5
table(gerber$voting, predictLog > 0.5)
(235388+0)/nrow(gerber)
table(gerber$voting)
235388/nrow(gerber)
(51966+134513)/nrow(gerber)
(235388+0)/nrow(gerber)
235388/nrow(gerber)
install.packages("ROCR")
#1.6
table(gerber$voting)
235388/nrow(gerber)
install.packages("ROCR")
library(ROCR)
ROCRpred = prediction(predictLog, gerber$voting)
as.numeric(performance(ROCRpred, "auc")@y.values)
#2.1
CARTmodel = rpart(voting ~ civicduty + hawthorne + self + neighbors, data=gerber)
#2.1
library(rpart)
library(rpart.plot)
CARTmodel = rpart(voting ~ civicduty + hawthorne + self + neighbors, data=gerber)
prp(CARTmodel)
#2.2
CARTmodel2 = rpart(voting ~ civicduty + hawthorne + self + neighbors, data=gerber, cp=0.0)
prp(CARTmodel2)
#2.4
CARTmodel3 = rpart(voting ~ civicduty + hawthorne + self + neighbors + sex, data=gerber, cp=0.0)
prp(CARTmodel3)
#3.1
CARTcontrol = rpart(voting ~ control, cp=0.0)
CARTsex = rpart(voting ~ control + sex, cp=0.0)
prp(CARTcontrol, digits=6)
#3.1
CARTcontrol = rpart(voting ~ control, cp=0.0)
CARTsex = rpart(voting ~ control + sex, cp=0.0)
CARTcontrol = rpart(voting ~ control, data=gerber, cp=0.0)
CARTsex = rpart(voting ~ control + sex, data=gerber, cp=0.0)
prp(CARTcontrol, digits=6)
#3.2
prp(CARTsex)
#3.2
prp(CARTsex, digits=6)
#3.3
LogModelSex = glm(voting ~ control + sex, data=gerber, family="binomial")
summary(LogModelSex)
#3.4
Possibilities = data.frame(sex=c(0,0,1,1),control=c(0,1,0,1))
predict(LogModelSex, newdata=Possibilities, type="response")
0.2908065 - 0.290456
abs(0.2908065 - 0.290456)
abs(0.2908065 - 0.290456, digits = 5)
#3.5
LogModel2 = glm(voting ~ sex + control + sex:control, data=gerber, family="binomial")
#3.6
predict(LogModel2, newdata=Possibilities, type="response")
abs(0.2904558 - 0.290456)
Possibilities
summary(LogModelSex)
predict(LogModelSex, newdata=Possibilities, type="response")
Possibilities
install.packages("tm")
install.packages("SnowballC")
