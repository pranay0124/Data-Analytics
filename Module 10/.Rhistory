getwd()
getwd()
mvtWeek1 <- read.csv("C:/Users/dellg7/Downloads/mvtWeek1.csv")
View(mvtWeek1)
hist(mvt$Date, breaks = 100)
mvt = read.csv(mvtWeek1)
mvt = read.csv(mvtWeek1.csv)
mvt <- read.csv("C:/Users/dellg7/Downloads/mvtWeek1.csv")
View(mvt)
hist(mvt$Date, breaks = 100)
DateConvert = as.Date(strptime(mvt$Date, "%m/%d/%y %H:%M"))
mvt$Date = DateConvert
hist(mvt$Date, breaks = 100)
save.image("C:/Users/dellg7/Desktop/temm.RData")
load("C:/Users/dellg7/Desktop/temm.RData")
The preview shows you a rendered HTML copy of the contents of the editor. Consequently, unlike *Knit*, *Preview* does not run any R code chunks. Instead, the output of the chunk when it was last run in the editor is displayed.
hist(mvt$Date, breaks = 100)
boxplot(mvt$Date ~ mvt$Arrest)
table(mvt$Arrest, mvt$Year == 2001)
2152/(13384+2152)
2152/(18517+2152)
table(mvt$Arrest, mvt$Year == 2007)
1212/(13068+1212)
table(mvt$Arrest, mvt$Year == 2012)
550/(13542+550)
---
title: "R Notebook"
output: html_notebook
---
hist(mvt$Date, breaks = 100)
boxplot(mvt$Date ~ mvt$Arrest)
table(mvt$Arrest, mvt$Year == 2001)
plot(cars)
plot(cars)
hist(mvt$Date, breaks = 100)
boxplot(mvt$Date ~ mvt$Arrest)
table(mvt$Arrest, mvt$Year == 2001)
Ä« hist(mvt$Date, breaks = 100)
hist(mvt$Date, breaks = 100)
boxplot(mvt$Date ~ mvt$Arrest)
table(mvt$Arrest, mvt$Year == 2001)
plot(cars)
hist(mvt$Date, breaks = 100)
hist(mvt$Date, breaks = 100)
teamRank = c(1,2,3,3,4,4,4,4,5,5)
wins2012 = c(94,88,95,88,93,94,98,97,93,94)
cor(c, wins2012)
cor(teamRank, wins2012)
wins2013 = c(97,97,92,93,92,96,94,96,92,90)
cor(teamRank, wins2013)
setwd("E:/Data-Analytics/Module 2")
#1
hist(mvt$Date, breaks = 100)
#5
table(mvt$Arrest, mvt$Year == 2001)
2152/(18517+2152)
#1
hist(mvt$Date, breaks = 100)
#6
table(mvt$Arrest, mvt$Year == 2007)
cc = read.csv("climate_change.csv")
View(cc)
trainingSet = subset(cc, cc$Year <= 2006)
testingSet = subset(cc, cc$Year > 2006)
model1 = lm(Temp ~ MEI+CO2+CH4+N2O+CFC.11+CFC.12+TSI+Aerosols, data = trainingSet)
summary(model1)
#4
cor(trainingSet)
#4
cor(trainingSet)
#6
model2 = lm(Temp ~ MEI+TSI+Aerosols+N2O, data = trainingSet)
summary(model2)
#8
cc_step = step(cc)
?step
#8
model1_new = step(model1)
summary(model1_new)
#10
predictTest = predict(model1_new, newdata = testingSet)
#10
predictTest = predict(model1_new, newdata = testingSet)
SSE = sum((predictTest - testingSet$Temp)^2)
SST = sum((mean(trainingSet$Temp) - testingSet$Temp)^2)
R2 = 1 - SSE/SST
R2
predictTest = predict(model1_new, newdata = testingSet)
predictTest
setwd("E:/Data-Analytics/Module 3")
plot(cars)
pisaTrain = read.csv("pisa2009train.csv")
pisaTest = read.csv("pisa2009test.csv")
# QUESTION 1
str(pisaTrain)
# QUESTION 2
tapply(pisaTrain$readingScore, pisaTrain$male, mean)
# QUESTION 3
summary(pisaTrain)
#QUESTION 4
pisaTrain = na.omit(pisaTrain)
pisaTest = na.omit(pisaTest)
str(pisaTrain)
# QUESTION 5, 6 (the table columns are oraganised in order in ordered factors)
#male factor is omitted as it has only two columns but we need more than 2 columns
str(pisaTrain)
table(pisaTrain$grade)
table(pisaTrain$male)
table(pisaTrain$raceeth)
# QUESTION 10
pisaTrain$raceeth = relevel(pisaTrain$raceeth, "White")
pisaTest$raceeth = relevel(pisaTest$raceeth, "White")
lmScore = lm(readingScore ~. , data = pisaTrain)
summary(lmScore)
# QUESTION 11
lmScore = lm(readingScore ~. , data = pisaTrain)
SSE = sum(lmScore$residuals^2)
RMSE = sqrt(SSE/nrow(pisaTrain))
RMSE
# QUESTION 12
summary(lmScore)
# grade - estimate * (studnetA_grade - studentB_grade)
# QUESTION 13
summary(lmScore)
# QUESTION 14
redTest = predict(lmScore, newdata = pisaTest)
summary(redTest)
# QUESTION 15
SSE = sum((redTest - pisaTest$readingScore)^2)
SSE
# QUESTION 16
RMSE = sqrt(SSE/nrow(pisaTest))
RMSE
# QUESTION 17
mean(pisaTrain$readingScore)
# QUESTION 18
SST = sum((mean(pisaTrain$readingScore) - pisaTest$readingScore)^2)
SST
# QUESTION 19
testSetRsquared = 1 - SSE/SST
testSetRsquared
# Chunk 1
plot(cars)
# Chunk 2
pisaTrain = read.csv("pisa2009train.csv")
pisaTest = read.csv("pisa2009test.csv")
# Chunk 3
# QUESTION 1
str(pisaTrain)
# Chunk 4
# QUESTION 2
tapply(pisaTrain$readingScore, pisaTrain$male, mean)
# Chunk 5
# QUESTION 3
summary(pisaTrain)
# Chunk 6
#QUESTION 4
pisaTrain = na.omit(pisaTrain)
pisaTest = na.omit(pisaTest)
str(pisaTrain)
# Chunk 7
# QUESTION 5, 6 (the table columns are oraganised in order in ordered factors)
#male factor is omitted as it has only two columns but we need more than 2 columns
str(pisaTrain)
table(pisaTrain$grade)
table(pisaTrain$male)
table(pisaTrain$raceeth)
# Chunk 8
# QUESTION 10
pisaTrain$raceeth = relevel(pisaTrain$raceeth, "White")
pisaTest$raceeth = relevel(pisaTest$raceeth, "White")
lmScore = lm(readingScore ~. , data = pisaTrain)
summary(lmScore)
# Chunk 9
# QUESTION 11
lmScore = lm(readingScore ~. , data = pisaTrain)
SSE = sum(lmScore$residuals^2)
RMSE = sqrt(SSE/nrow(pisaTrain))
RMSE
# Chunk 10
# QUESTION 12
summary(lmScore)
# grade - estimate * (studnetA_grade - studentB_grade)
# Chunk 11
# QUESTION 13
summary(lmScore)
# Chunk 12
# QUESTION 14
redTest = predict(lmScore, newdata = pisaTest)
summary(redTest)
# Chunk 13
# QUESTION 15
SSE = sum((redTest - pisaTest$readingScore)^2)
SSE
# Chunk 14
# QUESTION 16
RMSE = sqrt(SSE/nrow(pisaTest))
RMSE
# Chunk 15
# QUESTION 17
mean(pisaTrain$readingScore)
# Chunk 16
# QUESTION 18
SST = sum((mean(pisaTrain$readingScore) - pisaTest$readingScore)^2)
SST
# Chunk 17
# QUESTION 19
testSetRsquared = 1 - SSE/SST
testSetRsquared
plot(cars)
FluTrain = read.csv("FluTrain.csv")
# QUESTION 1
hist(FluTrain$ILI, breaks = 100)
# QUESTION 2, 3
plot(log(FluTrain$ILI), log(FluTrain$Queries))
# QUESTION 4
FluTrend1 = lm(log(ILI) ~ Queries, data = FluTrain)
summary(FluTrend1)
# QUESTION 5
cor(log(FluTrain$ILI), FluTrain$Queries)
# correalation_value ^ 2 =  R-squaredvalue
# QUESTION 6
FluTest = read.csv("FluTest.csv")
PredTest1 = exp(predict(FluTrend1, newdata=FluTest))
PredTest1[which(FluTest$Week == "2012-03-11 - 2012-03-17")]
# QUESTION 7
subset(FluTest, Week=="2012-03-11 - 2012-03-17")
# relative_error = (Observed ILI - Estimated ILI)/Observed ILI
(2.293422 - 2.187378)/2.293422
# QUESTION 8
SSE = sum((PredTest1-FluTest$ILI)^2)
RMSE = sqrt(SSE / nrow(FluTest))
RMSE
# QUESTION 9
# the value of -2 passed to lag means to return 2 observations before the current one;
# a positive value would have returned future observations.
# na.pad=TRUE means to add missing values for the first two weeks of our dataset, where we can't compute the data from 2 weeks earlier.
ILILag2 = lag(zoo(FluTrain$ILI), -2, na.pad=TRUE)
# QUESTION 10
plot(log(FluTrain$ILILag2), log(FluTrain$ILI))
setwd("E:/Data-Analytics/Module 7")
plot(cars)
# QUESTION 1.1
letters = read.csv("letters_ABPR.csv")
letters$isB = as.factor(letters$letter == "B")
set.seed(1000)
spl = sample.split(letters$isB, SplitRatio = 0.5)
plot(cars)
# QUESTION 1.1
library(caTools)
letters = read.csv("letters_ABPR.csv")
letters$isB = as.factor(letters$letter == "B")
set.seed(1000)
spl = sample.split(letters$isB, SplitRatio = 0.5)
train = subset(letters, spl == TRUE)
test = subset(letters, spl == FALSE)
table(test$isB)
1175/(1175+383)
# QUESTION 1.2
CARTb = rpart(isB ~ . - letter, data=train, method="class")
setwd("E:/Data-Analytics/Module 8")
setwd("E:/Data-Analytics/Module 9")
setwd("E:/Data-Analytics/Module 10")
install.packages("igraph")
